openapi: 3.0.0
info:
  title: Password Management API
  description: API for securely managing passwords, including storing, viewing, editing, and sharing passwords between users and groups.
  version: 1.0.0
  contact:
    name: Project Team
    email: contact@passwordmanager.com
tags:
  - name: users
    description: User related operations
  - name: groups
    description: Group related operations
  - name: passwords
    description: Password related operations
  - name: log
    description: Log related operations

paths:
  /users:
    post:
      summary: Create a new users
      description: Adds a new users to the system.
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input (e.g. missing fields, invalid data types)
        '409':
          description: Conflict (e.g. users already exists)
        '500':
          description: Internal server error

    get:
      summary: Get all users
      description: Retrieves a list of all users.
      tags:
        - users
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

  /users/{userId}:
    get:
      summary: Get users by ID
      description: Retrieves a users's details by their ID.
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update users
      description: Updates the information of a specific users.
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid input (e.g. invalid data type)
        '404':
          description: User not found
        '500':
          description: Internal server error

    delete:
      summary: Delete users
      description: Deletes a users from the system by their ID.
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal server error

  /groups:
    post:
      summary: Create a new groups
      description: Creates a new groups to share passwords with members.
      tags:
        - groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input (e.g. missing fields)
        '500':
          description: Internal server error

    get:
      summary: Get all groups
      description: Retrieves a list of all groups.
      tags:
        - groups
      responses:
        '200':
          description: List of all groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '500':
          description: Internal server error

  /groups/{groupId}:
    get:
      summary: Get groups by ID
      description: Retrieves a groups's details by its ID.
      tags:
        - groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Group found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
        '500':
          description: Internal server error

    put:
      summary: Update groups
      description: Updates the information of a specific groups.
      tags:
        - groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Group updated successfully
        '400':
          description: Invalid input (e.g. invalid data type)
        '404':
          description: Group not found
        '500':
          description: Internal server error

    delete:
      summary: Delete groups
      description: Deletes a groups from the system by its ID.
      tags:
        - groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Group deleted successfully
        '404':
          description: Group not found
        '500':
          description: Internal server error

  /passwords:
    post:
      summary: Create a new passwords entry
      description: Adds a new passwords entry for a users.
      tags:
        - passwords
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
      responses:
        '201':
          description: Password created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Password'
        '400':
          description: Invalid input (e.g. missing fields, incorrect passwords format)
        '500':
          description: Internal server error

    get:
      summary: Get all passwords
      description: Retrieves all passwords for the authenticated users.
      tags:
        - passwords
      responses:
        '200':
          description: List of all passwords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Password'
        '500':
          description: Internal server error

  /passwords/{passwordId}:
    get:
      summary: Get passwords entry by ID
      description: Retrieves a passwords entry by its ID.
      tags:
        - passwords
      parameters:
        - in: path
          name: passwordId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Password found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Password'
        '404':
          description: Password not found
        '500':
          description: Internal server error

    put:
      summary: Update passwords entry
      description: Updates a specific passwords entry.
      tags:
        - passwords
      parameters:
        - in: path
          name: passwordId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid input (e.g. invalid passwords format)
        '404':
          description: Password not found
        '500':
          description: Internal server error

    delete:
      summary: Delete passwords entry
      description: Deletes a passwords entry by its ID.
      tags:
        - passwords
      parameters:
        - in: path
          name: passwordId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Password deleted successfully
        '404':
          description: Password not found
        '500':
          description: Internal server error

  /logs:
    get:
      summary: Get all access logs
      description: Retrieves a list of all access logs.
      tags:
        - log
      responses:
        '200':
          description: List of all logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
        '500':
          description: Internal server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        groupId:
          type: integer

    Group:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        members:
          type: array
          items:
            type: integer
        passwords:
          type: array
          items:
            type: integer

    Password:
      type: object
      properties:
        id:
          type: integer
        urlOrDescription:
          type: string
        username:
          type: string
        password:
          type: string
        metadata:
          type: object
          properties:
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    Log:
      type: object
      properties:
        userId:
          type: integer
        actionType:
          type: string
        actionDate:
          type: string
          format: date-time